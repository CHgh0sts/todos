#!/usr/bin/env node

/**
 * Script de test pour v√©rifier toutes les actions de maintenance
 */

const https = require('https')
const http = require('http')

const BASE_URL = 'http://localhost:3000'

// Actions de maintenance √† tester
const MAINTENANCE_ACTIONS = [
  'clear-cache',
  'optimize-db', 
  'cleanup-logs',
  'restart-services',
  'check-health',
  'update-search-index',
  'full-backup'
]

// Fonction pour faire une requ√™te HTTP
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https') ? https : http
    
    const req = protocol.request(url, options, (res) => {
      let data = ''
      
      res.on('data', (chunk) => {
        data += chunk
      })
      
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data)
          resolve({
            status: res.statusCode,
            data: jsonData
          })
        } catch (error) {
          resolve({
            status: res.statusCode,
            data: data
          })
        }
      })
    })
    
    req.on('error', (error) => {
      reject(error)
    })
    
    if (options.body) {
      req.write(options.body)
    }
    
    req.end()
  })
}

// Test d'une action de maintenance
async function testMaintenanceAction(action) {
  console.log(`\nüîß Test de l'action: ${action}`)
  
  try {
    const startTime = Date.now()
    
    const response = await makeRequest(`${BASE_URL}/api/admin/maintenance`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ action })
    })
    
    const duration = Date.now() - startTime
    
    if (response.status === 200) {
      console.log(`‚úÖ ${action} - Succ√®s (${duration}ms)`)
      console.log(`   Message: ${response.data.result?.message || 'N/A'}`)
      
      // Afficher des d√©tails sp√©cifiques selon l'action
      if (action === 'clear-cache' && response.data.result?.freedSpace) {
        console.log(`   Espace lib√©r√©: ${response.data.result.freedSpace}`)
      }
      
      if (action === 'optimize-db' && response.data.result?.statistics) {
        const stats = response.data.result.statistics
        console.log(`   Statistiques: ${stats.users} utilisateurs, ${stats.projects} projets, ${stats.todos} t√¢ches`)
      }
      
      if (action === 'cleanup-logs' && response.data.result?.deleted) {
        const deleted = response.data.result.deleted
        console.log(`   Logs supprim√©s: ${deleted.activityLogs} activit√©, ${deleted.apiLogs} API`)
      }
      
      if (action === 'restart-services' && response.data.result?.services) {
        console.log(`   Services red√©marr√©s: ${response.data.result.services.join(', ')}`)
      }
      
      if (action === 'check-health' && response.data.result?.health) {
        const health = response.data.result.health
        console.log(`   √âtat DB: ${health.database}, Utilisateurs actifs: ${health.users?.active24h || 0}`)
      }
      
      if (action === 'update-search-index' && response.data.result?.indexed) {
        const indexed = response.data.result.indexed
        console.log(`   Index√©: ${indexed.projects} projets, ${indexed.todos} t√¢ches`)
      }
      
      if (action === 'full-backup' && response.data.result?.backupId) {
        console.log(`   Sauvegarde: ${response.data.result.backupId} (${response.data.result.size})`)
      }
      
      return true
    } else if (response.status === 401) {
      console.log(`‚ö†Ô∏è  ${action} - Non autoris√© (authentification requise)`)
      return false
    } else {
      console.log(`‚ùå ${action} - Erreur ${response.status}`)
      console.log(`   R√©ponse: ${JSON.stringify(response.data, null, 2)}`)
      return false
    }
    
  } catch (error) {
    console.log(`‚ùå ${action} - Erreur: ${error.message}`)
    return false
  }
}

// Test de toutes les actions
async function testAllMaintenanceActions() {
  console.log('üß™ Test de toutes les actions de maintenance\n')
  
  let successCount = 0
  let totalCount = MAINTENANCE_ACTIONS.length
  
  for (const action of MAINTENANCE_ACTIONS) {
    const success = await testMaintenanceAction(action)
    if (success) successCount++
    
    // Attendre un peu entre les tests
    await new Promise(resolve => setTimeout(resolve, 500))
  }
  
  console.log(`\nüìä R√©sultats: ${successCount}/${totalCount} actions r√©ussies`)
  
  if (successCount === 0) {
    console.log('\n‚ö†Ô∏è  Aucune action n\'a r√©ussi. V√©rifiez:')
    console.log('   - Le serveur est d√©marr√© (npm run dev)')
    console.log('   - Vous √™tes connect√© en tant qu\'administrateur')
    console.log('   - L\'API de maintenance est accessible')
  } else if (successCount < totalCount) {
    console.log('\n‚ö†Ô∏è  Certaines actions ont √©chou√©. V√©rifiez les logs ci-dessus.')
  } else {
    console.log('\nüéâ Toutes les actions de maintenance fonctionnent parfaitement!')
  }
}

// Test de l'API de maintenance (sans authentification)
async function testMaintenanceAPI() {
  console.log('üåê Test de l\'accessibilit√© de l\'API de maintenance...')
  
  try {
    const response = await makeRequest(`${BASE_URL}/api/admin/maintenance`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ action: 'test' })
    })
    
    if (response.status === 401) {
      console.log('‚úÖ API accessible (authentification requise comme attendu)')
      return true
    } else if (response.status === 400) {
      console.log('‚úÖ API accessible (action invalide d√©tect√©e)')
      return true
    } else {
      console.log(`‚ö†Ô∏è  R√©ponse inattendue: ${response.status}`)
      return false
    }
    
  } catch (error) {
    console.log(`‚ùå API inaccessible: ${error.message}`)
    return false
  }
}

// Fonction principale
async function main() {
  console.log('üöÄ Test complet du syst√®me de maintenance\n')
  console.log('üìù Ce script teste:')
  console.log('   - L\'accessibilit√© de l\'API de maintenance')
  console.log('   - Toutes les 7 actions de maintenance disponibles')
  console.log('   - La gestion des erreurs et de l\'authentification\n')
  
  // Test de l'API
  const apiAccessible = await testMaintenanceAPI()
  
  if (!apiAccessible) {
    console.log('\n‚ùå L\'API de maintenance n\'est pas accessible. Arr√™t des tests.')
    return
  }
  
  // Test de toutes les actions
  await testAllMaintenanceActions()
  
  console.log('\nüí° Pour tester avec authentification:')
  console.log('   1. Connectez-vous en tant qu\'administrateur sur http://localhost:3000')
  console.log('   2. Allez sur /admin/settings')
  console.log('   3. Cliquez sur l\'onglet "Maintenance"')
  console.log('   4. Testez chaque bouton individuellement')
  
  console.log('\nüìö Actions disponibles:')
  MAINTENANCE_ACTIONS.forEach((action, index) => {
    const descriptions = {
      'clear-cache': 'Vide le cache syst√®me',
      'optimize-db': 'Optimise la base de donn√©es',
      'cleanup-logs': 'Supprime les anciens logs',
      'restart-services': 'Red√©marre les services',
      'check-health': 'V√©rifie la sant√© du syst√®me',
      'update-search-index': 'Met √† jour l\'index de recherche',
      'full-backup': 'Cr√©e une sauvegarde compl√®te'
    }
    console.log(`   ${index + 1}. ${action}: ${descriptions[action]}`)
  })
}

// Ex√©cution
main().catch(console.error) 