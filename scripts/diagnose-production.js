#!/usr/bin/env node

/**
 * Script de diagnostic pour v√©rifier la configuration en production
 * Utilisation: node scripts/diagnose-production.js
 */

const { PrismaClient } = require('@prisma/client')
const jwt = require('jsonwebtoken')

console.log('üîç Diagnostic de la configuration de production...\n')

// V√©rifier les variables d'environnement
console.log('üìã Variables d\'environnement:')
console.log('- NODE_ENV:', process.env.NODE_ENV || 'non d√©fini')
console.log('- DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ d√©fini' : '‚ùå manquant')
console.log('- JWT_SECRET:', process.env.JWT_SECRET ? '‚úÖ d√©fini' : '‚ùå manquant')
console.log('- NEXTAUTH_SECRET:', process.env.NEXTAUTH_SECRET ? '‚úÖ d√©fini' : '‚ùå manquant')
console.log('- NEXTAUTH_URL:', process.env.NEXTAUTH_URL || 'non d√©fini')
console.log('')

// Tester la connexion √† la base de donn√©es
async function testDatabase() {
  console.log('üîç Test de connexion √† la base de donn√©es...')
  
  const prisma = new PrismaClient()
  
  try {
    await prisma.$connect()
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie')
    
    // Tester une requ√™te simple
    const userCount = await prisma.user.count()
    console.log(`‚úÖ Nombre d'utilisateurs dans la base: ${userCount}`)
    
    // Tester la table des projets
    const projectCount = await prisma.project.count()
    console.log(`‚úÖ Nombre de projets dans la base: ${projectCount}`)
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† la base de donn√©es:', error.message)
    console.error('   Code d\'erreur:', error.code)
    console.error('   D√©tails:', error.meta)
  } finally {
    await prisma.$disconnect()
  }
}

// Tester la g√©n√©ration de JWT
function testJWT() {
  console.log('\nüîç Test de g√©n√©ration JWT...')
  
  if (!process.env.JWT_SECRET) {
    console.error('‚ùå JWT_SECRET manquant')
    return
  }
  
  try {
    const testPayload = { userId: 'test-user-id', exp: Math.floor(Date.now() / 1000) + 3600 }
    const token = jwt.sign(testPayload, process.env.JWT_SECRET)
    console.log('‚úÖ G√©n√©ration JWT r√©ussie, longueur du token:', token.length)
    
    // Tester la v√©rification
    const decoded = jwt.verify(token, process.env.JWT_SECRET)
    console.log('‚úÖ V√©rification JWT r√©ussie, userId:', decoded.userId)
    
  } catch (error) {
    console.error('‚ùå Erreur JWT:', error.message)
  }
}

// V√©rifier les permissions de fichiers
function checkFilePermissions() {
  console.log('\nüîç V√©rification des permissions...')
  
  const fs = require('fs')
  const path = require('path')
  
  try {
    // V√©rifier le r√©pertoire .next
    const nextDir = path.join(process.cwd(), '.next')
    if (fs.existsSync(nextDir)) {
      console.log('‚úÖ R√©pertoire .next existe')
      const stats = fs.statSync(nextDir)
      console.log('‚úÖ Permissions .next:', stats.mode.toString(8))
    } else {
      console.log('‚ö†Ô∏è  R√©pertoire .next n\'existe pas (normal en d√©veloppement)')
    }
    
    // V√©rifier le r√©pertoire prisma
    const prismaDir = path.join(process.cwd(), 'prisma')
    if (fs.existsSync(prismaDir)) {
      console.log('‚úÖ R√©pertoire prisma existe')
    } else {
      console.log('‚ùå R√©pertoire prisma manquant')
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des permissions:', error.message)
  }
}

// Tester les en-t√™tes HTTP
function testHeaders() {
  console.log('\nüîç Configuration des en-t√™tes...')
  
  // Simuler une requ√™te avec token
  const testToken = 'Bearer test-token-123'
  console.log('‚úÖ Format d\'en-t√™te Authorization test√©:', testToken.startsWith('Bearer '))
}

// Ex√©cuter tous les tests
async function runDiagnostics() {
  try {
    await testDatabase()
    testJWT()
    checkFilePermissions()
    testHeaders()
    
    console.log('\nüéâ Diagnostic termin√©!')
    console.log('\nüí° Si vous voyez des erreurs:')
    console.log('   1. V√©rifiez que toutes les variables d\'environnement sont d√©finies')
    console.log('   2. V√©rifiez la connexion √† la base de donn√©es')
    console.log('   3. V√©rifiez que Prisma est correctement configur√©')
    console.log('   4. Red√©marrez l\'application apr√®s les corrections')
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error)
    process.exit(1)
  }
}

runDiagnostics() 