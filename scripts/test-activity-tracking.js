#!/usr/bin/env node

/**
 * Script de test pour le syst√®me de tracking d'activit√© utilisateur
 */

const { PrismaClient } = require('@prisma/client')
const { logUserActivity, logNavigation, logCreate, logEdit, logDelete, ACTIVITY_TYPES } = require('../src/lib/userActivityLogger')

const prisma = new PrismaClient()

async function testActivityTracking() {
  console.log('üß™ Test du syst√®me de tracking d\'activit√© utilisateur\n')

  try {
    // V√©rifier la connexion √† la base de donn√©es
    await prisma.$connect()
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie')

    // R√©cup√©rer un utilisateur de test
    const testUser = await prisma.user.findFirst()

    if (!testUser) {
      console.log('‚ùå Aucun utilisateur trouv√© pour les tests')
      return
    }

    console.log(`üë§ Utilisateur de test: ${testUser.name} (ID: ${testUser.id})`)

    // Test 1: Navigation
    console.log('\nüìç Test 1: Tracking de navigation')
    await logNavigation(testUser.id, 'Page de test', '127.0.0.1', 'Test User Agent')
    console.log('‚úÖ Navigation track√©e')

    // Test 2: Cr√©ation
    console.log('\nüìç Test 2: Tracking de cr√©ation')
    await logCreate(testUser.id, 'projet', 'Projet de test', 999, '127.0.0.1', 'Test User Agent')
    console.log('‚úÖ Cr√©ation track√©e')

    // Test 3: Modification
    console.log('\nüìç Test 3: Tracking de modification')
    await logEdit(testUser.id, 't√¢che', 'T√¢che de test', 888, { status: 'completed' }, '127.0.0.1', 'Test User Agent')
    console.log('‚úÖ Modification track√©e')

    // Test 4: Suppression
    console.log('\nüìç Test 4: Tracking de suppression')
    await logDelete(testUser.id, 'cat√©gorie', 'Cat√©gorie de test', 777, '127.0.0.1', 'Test User Agent')
    console.log('‚úÖ Suppression track√©e')

    // Test 5: Activit√© g√©n√©rique
    console.log('\nüìç Test 5: Tracking d\'activit√© g√©n√©rique')
    await logUserActivity({
      userId: testUser.id,
      action: ACTIVITY_TYPES.NAVIGATION,
      details: {
        page: 'Test g√©n√©rique',
        custom: 'donn√©es personnalis√©es'
      },
      ipAddress: '127.0.0.1',
      userAgent: 'Test User Agent'
    })
    console.log('‚úÖ Activit√© g√©n√©rique track√©e')

    // V√©rifier les donn√©es enregistr√©es
    console.log('\nüìä V√©rification des donn√©es enregistr√©es:')
    
    const activities = await prisma.userActivity.findMany({
      where: {
        userId: testUser.id,
        createdAt: {
          gte: new Date(Date.now() - 60000) // Derni√®re minute
        }
      },
      include: {
        user: {
          select: {
            name: true,
            email: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    })

    console.log(`üìà ${activities.length} activit√©s trouv√©es:`)
    activities.forEach((activity, index) => {
      console.log(`  ${index + 1}. ${activity.action} - ${JSON.stringify(activity.details)} (${activity.createdAt.toLocaleString()})`)
    })

    // Statistiques par type d'action
    console.log('\nüìä Statistiques par type d\'action:')
    const stats = await prisma.userActivity.groupBy({
      by: ['action'],
      _count: {
        action: true
      },
      where: {
        userId: testUser.id,
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Derni√®res 24h
        }
      }
    })

    stats.forEach(stat => {
      console.log(`  ${stat.action}: ${stat._count.action} activit√©s`)
    })

    console.log('\n‚úÖ Tests termin√©s avec succ√®s!')

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Fonction pour nettoyer les donn√©es de test
async function cleanupTestData() {
  console.log('\nüßπ Nettoyage des donn√©es de test...')
  
  try {
    await prisma.$connect()
    
    const deleted = await prisma.userActivity.deleteMany({
      where: {
        details: {
          path: ['page'],
          equals: 'Page de test'
        }
      }
    })

    console.log(`üóëÔ∏è ${deleted.count} activit√©s de test supprim√©es`)
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Fonction pour afficher les statistiques globales
async function showGlobalStats() {
  console.log('\nüìä Statistiques globales du syst√®me:')
  
  try {
    await prisma.$connect()
    
    const totalActivities = await prisma.userActivity.count()
    console.log(`üìà Total des activit√©s: ${totalActivities}`)
    
    const last24h = await prisma.userActivity.count({
      where: {
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000)
        }
      }
    })
    console.log(`üïê Activit√©s des derni√®res 24h: ${last24h}`)
    
    const actionStats = await prisma.userActivity.groupBy({
      by: ['action'],
      _count: {
        action: true
      }
    })
    
    console.log('\nüìä R√©partition par type d\'action:')
    actionStats.forEach(stat => {
      console.log(`  ${stat.action}: ${stat._count.action}`)
    })
    
    const activeUsers = await prisma.userActivity.groupBy({
      by: ['userId'],
      _count: {
        userId: true
      },
      where: {
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000)
        }
      }
    })
    
    console.log(`\nüë• Utilisateurs actifs (24h): ${activeUsers.length}`)
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cution du script
async function main() {
  const args = process.argv.slice(2)
  
  if (args.includes('--cleanup')) {
    await cleanupTestData()
  } else if (args.includes('--stats')) {
    await showGlobalStats()
  } else {
    await testActivityTracking()
  }
}

main().catch(console.error) 