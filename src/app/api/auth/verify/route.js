import { NextResponse } from 'next/server'
import prisma from '@/lib/prisma'

export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url)
    const token = searchParams.get('token')

    console.log('üîç Token re√ßu:', token)

    if (!token) {
      return NextResponse.json({ error: 'Token manquant' }, { status: 400 })
    }

    // D'abord, chercher l'utilisateur avec le token
    const userWithToken = await prisma.user.findFirst({
      where: { 
        verificationToken: token
      }
    })

    console.log('üë§ Utilisateur avec token trouv√©:', userWithToken ? `${userWithToken.email} (ID: ${userWithToken.id})` : 'Aucun')

    if (userWithToken) {
      // L'utilisateur a le token, v√©rifier s'il est d√©j√† v√©rifi√©
      if (userWithToken.isVerified) {
        console.log('‚úÖ Compte d√©j√† v√©rifi√© avec ce token')
        return NextResponse.json({ 
          message: 'Votre compte est d√©j√† v√©rifi√© !',
          alreadyVerified: true 
        })
      }

      // V√©rifier si le token n'a pas expir√©
      if (userWithToken.verificationExpires && userWithToken.verificationExpires < new Date()) {
        console.log('‚ö†Ô∏è Token expir√©')
        return NextResponse.json({ error: 'Le lien de v√©rification a expir√©' }, { status: 400 })
      }

      // Mettre √† jour l'utilisateur
      await prisma.user.update({
        where: { id: userWithToken.id },
        data: {
          isVerified: true,
          verificationToken: null,
          verificationExpires: null
        }
      })

      console.log('‚úÖ Compte v√©rifi√© avec succ√®s')
      return NextResponse.json({ 
        message: 'Votre compte a √©t√© v√©rifi√© avec succ√®s !',
        alreadyVerified: false
      })
    }

    // Si pas de token trouv√©, chercher si un utilisateur a d√©j√† √©t√© v√©rifi√© r√©cemment avec ce token
    // (pour g√©rer les cas de double requ√™te)
    const recentlyVerifiedUser = await prisma.user.findFirst({
      where: {
        isVerified: true,
        verificationToken: null,
        updatedAt: {
          gte: new Date(Date.now() - 5 * 60 * 1000) // Dans les 5 derni√®res minutes
        }
      },
      orderBy: {
        updatedAt: 'desc'
      }
    })

    if (recentlyVerifiedUser) {
      console.log('‚úÖ Compte r√©cemment v√©rifi√© trouv√©:', recentlyVerifiedUser.email)
      return NextResponse.json({ 
        message: 'Votre compte a √©t√© v√©rifi√© avec succ√®s !',
        alreadyVerified: true 
      })
    }

    console.log('‚ùå Token invalide ou expir√©')
    return NextResponse.json({ error: 'Token invalide ou expir√©' }, { status: 400 })

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification du compte:', error)
    return NextResponse.json(
      { error: 'Erreur lors de la v√©rification du compte' },
      { status: 500 }
    )
  }
} 